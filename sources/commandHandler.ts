import { ParseMode, TgBot } from './tgBot.js'
import { DatabaseDobra } from './db.js'
import config from "./config.js";
import { User } from './models/user.js'
import { InlineKeyboardMarkup, Message, PhotoSize, Video, Document, ReplyKeyboardMarkup } from 'node-telegram-bot-api';


class CommandHandler {
    constructor (private db: DatabaseDobra, private bot: TgBot) {}

    start(chatId: number, username: string | undefined) {
        this.db.select_row_from_table('USERS', 'id_user', chatId, (row: any) => {
            let answer: string;
            if (row) {
                answer = `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${row.user_name}!`;
            } else {
                const table = 'USERS';
                const fields = `id_user,'user_name','karma','deeds','validations'`;
                const values = `${chatId},'${username}',${config.START_KARMA},0,0`;
    
                this.db.insert_data(table, fields, values, () => {});
                answer = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø, –±–æ—Ç –•—Ä–∞–Ω–∏—Ç–µ–ª—å –î–æ–±—Ä–∞\n\n` +
                    `üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–æ–≤ –î–æ–±—Ä–∞!\n` +
                    `üôè –ó–¥–µ—Å—å –º—ã –º–µ–Ω—è–µ–º –º–∏—Ä –∫ –ª—É—á—à–µ–º—É\n\n` +
                    `üí´ –î–µ—Ä–∂–∏ +${config.START_KARMA} Karma –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n` +
                    `‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è`;
            }
    
            const keyboard: ReplyKeyboardMarkup = {
                keyboard: [
                    [
                        {text: '–û –±–æ—Ç–µ'},
                        {text: '–ú–æ–π –∞–≤–∞—Ç–∞—Ä'},
                        {text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ'}
                    ]
                ],
                resize_keyboard: true
            }
            this.bot.sendMessage(chatId, answer, keyboard).then();
        });
    }
    
    info(chatId: number) {
        const answer = `–Ø - –±–æ—Ç –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ó–æ–≤–∞ –î–æ–±—Ä–∞. –ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –ú–∏—Ä –¥–æ–±—Ä–µ–µ!
                        \n –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: https://telegra.ph/Pravila-blokchejn-agregatora-Dobryh-del-Zov-Dobra-12-05`;
        
            const keyboard: ReplyKeyboardMarkup = { 
                keyboard: [
                    [
                        {text: '–û –±–æ—Ç–µ'},
                        {text: '–ú–æ–π –ê–≤–∞—Ç–∞—Ä'},
                        {text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ'}
                    ]
                ],
                resize_keyboard: true
            }
            this.bot.sendMessage(chatId, answer, keyboard).then();
    }
    
    user_info(chatId: number) {
        this.db.select_row_from_table('USERS', 'id_user', chatId, (row: any) => {
            const answer =
                `–¢–≤–æ—è Karma: ${row?.karma} \n–î–æ–±—Ä—ã–µ –¥–µ–ª–∞: ${row?.deeds} \n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${row?.validations}`;
    
            const keyboard: ReplyKeyboardMarkup = { 
                keyboard: [
                    [
                        {text: '–û –±–æ—Ç–µ'},
                        {text: '–ú–æ–π –ê–≤–∞—Ç–∞—Ä'},
                        {text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ'}
                    ]
                ],
                resize_keyboard: true
            }
    
            this.bot.sendMessage(chatId, answer, keyboard).then();
        });
    }
    
    add_deed(chatId: number) {
        const answer = `–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞`;
    
        const keyboard: ReplyKeyboardMarkup = { 
            keyboard: [
                [
                    {text: '–ù–∞–∑–∞–¥'},
                    {text: '–§–æ—Ç–æ'},
                    {text: '–í–∏–¥–µ–æ'},
                    {text: '–§–∞–π–ª'}
                ]
            ],
            resize_keyboard: true
        }
    
        this.bot.sendMessage(chatId, answer, keyboard).then();
    }
    
    back(chatId: number) {
        const answer = `–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é`;
    
        const keyboard: ReplyKeyboardMarkup = { 
            keyboard: [
                [
                    {text: '–û –±–æ—Ç–µ'},
                    {text: '–ú–æ–π –ê–≤–∞—Ç–∞—Ä'},
                    {text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ'}
                ]
            ],
            resize_keyboard: true
        }
    
        this.bot.sendMessage(chatId, answer, keyboard).then();
    }
    
    add_photo(chatId: number) {
        const answer = `–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–≤–æ–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞`;
        this.bot.sendMessage(chatId, answer).then();
    }
    
    add_video(chatId: number) {
        const answer = `–ü—Ä–∏—à–ª–∏ –º–Ω–µ –≤–∏–¥–µ–æ —Ç–≤–æ–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞`;
        this.bot.sendMessage(chatId, answer).then();
    }
    
    add_file(chatId: number) {
        const answer = `–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞`;
        this.bot.sendMessage(chatId, answer).then();
    }
    
    async add_karma(from_user: User, descr: string, msg_id: number, reply_to_msg: Message | undefined) {
        if (!reply_to_msg) {
            const answer = `–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π "/addkarma <i>–ó–∞ —Ç–æ, —á—Ç–æ..</i>", —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫–∞—Ä–º—ã.`;
    
            await this.bot.sendMessage(config.GROUP_ID, answer, undefined, ParseMode.HTML, msg_id, true).then();
    
        } else {
            const answer = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ ${config.KARMA_BY_USER_VOTING} Karma @${reply_to_msg.from?.username}.`
                + `\n\n–û–ø–∏c–∞–Ω–∏–µ:\n`
                + `<i>${descr}</i>`;
    
            const value = `'${reply_to_msg.message_id}'`;
            this.db.select_row_from_table('DEEDS', 'id_deed', value, (row: any) => {
                if (!row) {
                    const text = `sample`;
                    let table = 'DEEDS';
                    let fields = `id_deed,upvote,downvote,is_validated,description,type`;
                    let values = `'${reply_to_msg.message_id}',0,0,0,'${text}',4`;
    
                    this.db.insert_data(table, fields, values, (err: Error) => {
                        console.log(err);
                    });
    
                    table = `DEED_BY_USER`;
                    fields = `id_user,id_deed,id_msg`;
                    values = `${reply_to_msg.from?.id},'${reply_to_msg.message_id}',0`;
                    this.db.insert_data(table, fields, values, (err: Error) => {
                        console.log(err);
                    });
                }
            });
    
            const keyboard: InlineKeyboardMarkup = {
                inline_keyboard: [
                    [
                        {text: '–ó–∞—Å–ª—É–∂–∏–ª!', callback_data: `yes`},
                        {text: '–ü–æ–∫–∞ —Ä–∞–Ω–æ', callback_data: `no`}
                    ]
                ]
            }
    
            await this.bot.sendMessage(config.GROUP_ID, answer, keyboard, ParseMode.HTML, reply_to_msg.message_id, true).then();
        }
    }
    
    async photo_received(chatId: number, username: string | undefined, photo: PhotoSize, caption: string) {
        console.log(`handler_photo_received called by ${username} from chat ${chatId} with caption "${caption}"`)
        const answer = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ! #–ë—ã—Ç—å–î–æ–±—Ä—É\n` +
        `\n–û–ø–∏c–∞–Ω–∏–µ:\n` +
        `<i>${caption}</i>\n`;
    
        const value = `'${photo.file_unique_id}'`;
        this.db.select_row_from_table('DEEDS', 'id_deed', value, (row: any) => {
            if (!row) {
                const text = `sample`;
                let table = 'DEEDS';
                let fields = `id_deed,upvote,downvote,is_validated,description,type`;
                let values = `'${photo.file_unique_id}',0,0,0,'${text}',1`;
    
                this.db.insert_data(table, fields, values, (err: Error) => {
                    console.log(err);
                });
    
                table = `DEED_BY_USER`;
                fields = `id_user,id_deed,id_msg`;
                values = `${chatId},'${photo.file_unique_id}',0`;
                this.db.insert_data(table, fields, values, (err: Error) => {
                    console.log(err);
                });
            }
        });
    
        const keyboard: InlineKeyboardMarkup = {
            inline_keyboard: [
                [
                    {text: '–î–µ–ª–æ –¥–æ–±—Ä–æ–µ', callback_data: `yes`},
                    {text: '–ù–µ –æ—á–µ–Ω—å –¥–æ–±—Ä–æ–µ', callback_data: `no`}
                ]
            ]
        }
    
        console.log(`send photo to group ${config.GROUP_ID}`)
        try {
            await this.bot.sendAttachment(config.GROUP_ID, answer, photo, keyboard, ParseMode.HTML, undefined, true).then();
        } catch (err) {
            console.log(err);
        }

    }
    
    async video_received(chatId: number, username: string, video: Video, caption: string) {
        console.log(`handler_video_received called by ${username} from chat ${chatId} with caption "${caption}"`)
        const answer = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ! #–ë—ã—Ç—å–î–æ–±—Ä—É\n` +
            `\n–û–ø–∏c–∞–Ω–∏–µ:\n` +
            `<i>${caption}</i>\n`;
    
        // add deed to
        const value = `'${video.file_unique_id}'`;
        console.log(`received video with file_unique_id ${video.file_unique_id}`)
        this.db.select_row_from_table('DEEDS', 'id_deed', value, (row: any) => {
            if (!row) {
                const text = `sample`;
                let table = 'DEEDS';
                let fields = `id_deed,upvote,downvote,is_validated,description,type`;
                let values = `${value},0,0,0,'${text}',2`;
    
                this.db.insert_data(table, fields, values, (err: Error) => {
                    console.log(err);
                });
    
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞ –≤ —Ç–∞–±–ª–∏—á–∫—É DEED_BY_USER
                table = `DEED_BY_USER`;
                fields = `id_user,id_deed,id_msg`;
                values = `${chatId},'${video.file_unique_id}',0`;
                this.db.insert_data(table, fields, values, (err: Error) => {
                    console.log(err);
                });
            }
        });
    
        const keyboard: InlineKeyboardMarkup = {
            inline_keyboard: [
                [
                    {text: '–î–µ–ª–æ –¥–æ–±—Ä–æ–µ', callback_data: `yes`},
                    {text: '–ù–µ –æ—á–µ–Ω—å –¥–æ–±—Ä–æ–µ', callback_data: `no`}
                ]
            ]
        }
    
        console.log(`send video to group ${config.GROUP_ID}`)
        await this.bot.sendAttachment(config.GROUP_ID, answer, video, keyboard, ParseMode.HTML, undefined, true).then();
    }
    
    async file_received(chatId: number, username: string, document: Document, caption: string) {
        console.log(`handler_file_received called by ${username} from chat ${chatId} with caption "${caption}"`)
        const answer = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ! #–ë—ã—Ç—å–î–æ–±—Ä—É\n` +
            `\n–û–ø–∏c–∞–Ω–∏–µ:\n` +
            `<i>${caption}</i>\n`;
    
        // add deed to
        const value = `'${document.file_unique_id}'`;
        console.log(`received file with file_unique_id ${document.file_unique_id}`)
        this.db.select_row_from_table('DEEDS', 'id_deed', value, (row: any) => {
            if (!row) {
                const text = `sample`;
                let table = 'DEEDS';
                let fields = `id_deed,upvote,downvote,is_validated,description,type`;
                let values = `${value},0,0,0,'${text}',3`;
    
                this.db.insert_data(table, fields, values, (err: Error) => {
                    console.log(err);
                });
    
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞ –≤ —Ç–∞–±–ª–∏—á–∫—É DEED_BY_USER
                table = `DEED_BY_USER`;
                fields = `id_user,id_deed,id_msg`;
                values = `${chatId},'${document.file_unique_id}',0`;
                this.db.insert_data(table, fields, values, (err: Error) => {
                    console.log(err);
                });
            }
        });
    
        const keyboard: InlineKeyboardMarkup = {
            inline_keyboard: [
                [
                    {text: '–î–µ–ª–æ –¥–æ–±—Ä–æ–µ', callback_data: `yes`},
                    {text: '–ù–µ –æ—á–µ–Ω—å –¥–æ–±—Ä–æ–µ', callback_data: `no`}
                ]
            ]
        }
    
        console.log(`send file to group ${config.GROUP_ID}`)
        await this.bot.sendAttachment(config.GROUP_ID, answer, document, keyboard, ParseMode.HTML, undefined, true).then();
    }
    
    async tag_received(msg: Message, karma: number, answer: string) {
        if (typeof msg.from !== 'undefined') {
            this.db.update_karma(msg.from.id, karma);
            this.bot.sendMessage(config.GROUP_ID, answer, undefined, ParseMode.Markdown, msg.message_id).then();
        } else {
            // TODO handle error
        }
        
    }
    
    async unknown_message(chat_id: number) {
        const answer = `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, —á–µ–ª–æ–≤–µ–∫ üò¢`;
        this.bot.sendMessage(chat_id, answer).then();
    }
}

export default CommandHandler;
